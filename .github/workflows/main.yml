# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: SolarTherm Linux

on:
  workflow_dispatch:
    #
  push:
    branches: [ $default-branch, master-m ]
  pull_request:
    branches:  [ $default-branch, master-m ]
    #[ $default-branch, master-m ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-18.04]
        include:
          - os: ubuntu-20.04
            python-version: 3.8
          - os: ubuntu-18.04
            python-version: 3.6

    env:
      DAKVER: 6.14.0
      PYTEST_ADDOPTS: --color=yes

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip 
        python3 -m pip install --upgrade setuptools wheel
        python3 -m pip install scons flake8 scipy matplotlib DyMat pyswarm cma deap scoop pytest solsticepy openpyxl distro colorama
        # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        python3 -c "import DyMat; print(DyMat.__version__)"

    - name: Show Python context
      run: |
        python3 -m pip list

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src/python --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src/python --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Install OpenModelica
      run: |
        for deb in deb deb-src; do echo "$deb http://build.openmodelica.org/apt `lsb_release -cs` release"; done | sudo tee /etc/apt/sources.list.d/openmodelica.list
        wget -q http://build.openmodelica.org/apt/openmodelica.asc -O- | sudo apt-key add - 
        sudo apt update
        sudo apt install build-essential openmodelica omlib-modelica-3.2.3 libglpk-dev

    - name: Install Solstice
      run: |
        mkdir -p ~/.local
        tar zxv --strip-components=1 -C ~/.local < <(wget "https://www.meso-star.com/projects/solstice/downloads/Solstice-0.9.0-GNU-Linux64.tar.gz" -q -O-)

    - name: Install DAKOTA 20.04
      if: ${{ matrix.os == 'ubuntu-20.04' }}
      run: |
        sudo apt install openmpi-bin gsl-bin libquadmath0 libevent-pthreads-2.1-7 liblapack3 \
          libstdc++6 libboost-filesystem1.71.0 libboost-regex1.71.0 libboost-serialization1.71.0 \
          libgsl23 libgfortran5 libblas3 libopenmpi3 libhwloc15 libicu66 libgslcblas0 libquadmath0 \
          libevent-2.1-7 libevent-pthreads-2.1-7 libltdl7 libicu66
        export DAKSTEM=dakota-$DAKVER-linux-x86_64-jp
        export DAKURL="https://cloudstor.aarnet.edu.au/plus/s/TaoO6XnrGRiwoiC/download?path=%2F&files=$DAKSTEM.tar.gz"
        sudo tar zxv --strip-components=3 -C /usr/local < <(wget "$DAKURL" -q -O-)

    - name: Build SolarTherm
      run: |
        python3 -c "import setuptools;print('SETUPTOOLS =',setuptools.__version__)"
        # scons
        python3 -m SCons

    - name: Install SolarTherm
      run: |
        # scons install
        python3 -m SCons install

    - name: Run SolarTherm pytest
      run: |
        export PATH=~/.local/bin:$PATH
        export LD_LIBRARY_PATH=~/.local/lib:$LD_LIBRARY_PATH
        export PYTHONPATH=$PYTHONPATH:/usr/local/share/dakota/Python
        echo "CHECK SOLSTICE DEPS"
        ldd `which solstice`
        echo "LS LIBS"
        ls ~/.local/lib
        echo "RUNNING st env"
        st env
        echo "CHECKING SOLSTICE RUNS..."
        solstice --version
        echo "-----"
        cd tests
        python3 -m pytest

#    - name: Run SolarTherm test 2
#      run: |
#        export PATH=~/.local/bin:$PATH
#        cd tests
#        VERBOSE=1 st python TestXMLParameter_st_simulate.py
#
#    - name: Run SolarTherm test 3
#      run: |
#        export PATH=~/.local/bin:$PATH
#        cd tests
#        VERBOSE=1 st env
#        python TestXMLParameter_st_simulate.py
#
#    - name: Run SolarTherm tests
#      run: |
#        export PATH=~/.local/bin:$PATH
#        export LD_LIBRARY_PATH=~/.local/lib:$LD_LIBRARY_PATH
#        echo "---- PATHS ----"
#        echo "PATH=$PATH"
#        echo "PYTHONPATH=$PYTHONPATH"
#        #echo "---- env ----"
#        #env
#        #echo "-------DYMAT-----"
#        #python -c "import DyMat; print(DyMat.__version__)"
#        echo "-------st env-----"
#        STBASHRC=1 VERBOSE=1 st env
#        #env
#        echo "-------DYMAT-----"
#        python -c "import DyMat; print(DyMat.__version__)"
#        echo "------- sys.path -----"
#        python -c "import sys; print(sys.path)"
#        echo "-------testing...-----"
#        cd tests
#        VERBOSE=1 python TestXMLParameter_st_simulate.py
#        #nosetests
        
# vim: ts=2:sw=2:et
