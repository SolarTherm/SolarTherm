# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: SolarTherm Particle-Master Intermediate Branch

on:
  workflow_dispatch:
    #
  push:
    branches: [ $default-branch, particle-master-intermediate]
  pull_request:
    branches:  [ $default-branch, particle-master-intermediate]
    #[ $default-branch, master-m ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-18.04]
        include:
          - os: ubuntu-20.04
            python-version: 3.8
          - os: ubuntu-18.04
            python-version: 3.6

    env:
      DAKVER: 6.14.0
      PYTEST_ADDOPTS: --color=yes

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip 
        python3 -m pip install --upgrade setuptools wheel
        python3 -m pip install scons flake8 scipy matplotlib DyMat pyswarm cma deap scoop pytest openpyxl distro colorama tensorflow==2.4
        python3 -m pip install git+https://github.com/anustg/solstice-scripts.git@dev
        # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        python3 -c "import DyMat; print(DyMat.__version__)"

    - name: Show Python context
      run: |
        python3 -m pip list

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src/python --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src/python --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Install OpenModelica 1.14.2 for Ubuntu 18.04
      if: ${{ matrix.os == 'ubuntu-18.04' }}
      run: |
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3A59B53664970947 
        echo "deb https://build.openmodelica.org/omc/builds/linux/releases/1.14.2/ bionic release"| sudo tee /etc/apt/sources.list.d/openmodelica.list
        wget -q http://build.openmodelica.org/apt/openmodelica.asc -O- | sudo apt-key add - 
        sudo apt-get update
        sudo apt-get install build-essential openmodelica omlib-modelica-3.2.2 libglpk-dev libgsl-dev

    - name: Install OpenModelica 1.14.2 for Ubuntu 20.04
      if: ${{ matrix.os == 'ubuntu-20.04' }}
      run: |
        echo "deb https://build.openmodelica.org/omc/builds/linux/releases/1.14.2/ focal release"| sudo tee /etc/apt/sources.list.d/openmodelica.list
        wget -q http://build.openmodelica.org/apt/openmodelica.asc -O- | sudo apt-key add - 
        sudo apt-get update
        sudo apt-get install build-essential openmodelica omlib-modelica-3.2.3 libglpk-dev libgsl-dev

    - name: Install Tensorflow C API
      run: |
        wget -P ../ https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-2.6.0.tar.gz
        sudo tar -C /usr/ -xzf ../libtensorflow-cpu-linux-x86_64-2.6.0.tar.gz
        
    - name: Install Solstice
      run: |
        sudo apt install libpolyclipping-dev libtbb-dev libyaml-dev  libgomp1
        export UBVER=`lsb_release -cs`
        export SOLSTICEURL="https://cloudstor.aarnet.edu.au/plus/s/TaoO6XnrGRiwoiC/download?path=%2F&files=solstice-0.9-x86_64-$UBVER.tar.gz"
        sudo tar zxv --strip-components=3 -C /usr/local < <(wget "$SOLSTICEURL" -q -O-)
        echo "CHECK SOLSTICE DEPS"
        export PATH=$PATH:/usr/local/bin
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
        ldd `which solstice`
        echo "CHECKING SOLSTICE RUNS..."
        solstice --version
        echo "-----"
        echo "SOLSTICE VERSION:"
        solstice --version

    - name: Prepare for DAKOTA 18.04
      if: ${{ matrix.os == 'ubuntu-18.04' }}
      run: |
        sudo apt install libicu60 libboost-serialization1.65.1 libstdc++6 \
          libboost-filesystem1.65.1 libgcc1 libquadmath0 liblapack3 \
          libboost-regex1.65.1 libboost-system1.65.1 libblas3 libc6 \
          libgfortran4 openmpi-bin libopenmpi-dev

    - name: Prepare for DAKOTA 20.04
      if: ${{ matrix.os == 'ubuntu-20.04' }}
      run: |
        sudo apt install openmpi-bin libltdl7 liblapack3 libhwloc15 \
          libgslcblas0 libquadmath0 libboost-regex1.71.0 libgsl23 \
          libevent-2.1-7 libgfortran5 libboost-filesystem1.71.0 libopenmpi3 \
          libicu66 libblas3 libstdc++6 libevent-pthreads-2.1-7 \
          libboost-serialization1.71.0

    - name: Install DAKOTA
      run: |
        export PKGN=dakota-${{ env.DAKVER }}-${{ matrix.os }}-x86_64-jp
        export DAKURL="https://cloudstor.aarnet.edu.au/plus/s/TaoO6XnrGRiwoiC/download?path=%2F&files=$PKGN.tar.gz"
        sudo tar zxv --strip-components=3 -C /usr/local < <(wget "$DAKURL" -q -O-)
        export PATH=$PATH:/usr/local/bin    # needed for Ubuntu 18.04
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib  # needed for 18.04
        dakota --version
        export PYTHONPATH=$PYTHONPATH:/usr/local/share/dakota/Python
        python3 -c "import dakota.interfacing;print(dakota.interfacing.__file__)"

    - name: Install SAM Simulation Core
      run: |
        wget -P ../ https://samrepo.nrelcloud.org/beta-releases/sam-beta-linux-2020-11-12.run
        sudo chmod +x ../sam-beta-linux-2020-11-12.run
        ../sam-beta-linux-2020-11-12.run
        cp /opt/SAM/2020.11.12/linux_64/libssc.so ./src/modelica/SSC

    - name: Build SolarTherm
      run: |
        export PATH=$PATH:/usr/local/bin:~/.local/bin
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
        export PYTHONPATH=$PYTHONPATH:/usr/local/share/dakota/Python
        scons

    - name: Install SolarTherm
      run: |
        # scons install
        export PATH=$PATH:/usr/local/bin:~/.local/bin
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
        export PYTHONPATH=$PYTHONPATH:/usr/local/share/dakota/Python
        scons install

    - name: Test MPI
      run: |    
        mpirun --version
        mpicc --version
            
    - name: Test SolarTherm
      run: |
        export PATH=$PATH:/usr/local/bin:~/.local/bin
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib # this is only needed on 18.04
        export PYTHONPATH=$PYTHONPATH:/usr/local/share/dakota/Python
        cd tests
        which st
        st --version
        solstice --version
        st python -m pytest test_particlesystem1D_surrogate.py

# vim: ts=2:sw=2:et
