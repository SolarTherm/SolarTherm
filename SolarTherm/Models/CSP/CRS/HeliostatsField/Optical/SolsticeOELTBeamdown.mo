within SolarTherm.Models.CSP.CRS.HeliostatsField.Optical;

model SolsticeOELTBeamdown "Lookup table generated by Solstice for a beam down system"
extends OpticalEfficiency;
    import SolarTherm.Models.CSP.CRS.HeliostatsField.Optical.SolsticePyFunc;
    import SI = Modelica.SIunits;


    parameter SolarTherm.Types.Solar_angles angles=SolarTherm.Types.Solar_angles.dec_hra
    "Table angles"
        annotation (Dialog(group="Table data interpretation"));

    
    parameter String field_type = "surround" "Other options are : surround";
    parameter String rcv_type = "beam_down" "other options are : flat, cylinder, stl";  
	parameter String wea_file = Modelica.Utilities.Files.loadResource("modelica://SolarTherm/Data/Weather/example_TMY3.motab"); 

	parameter nSI.Angle_deg theta_deg=20 "acceptance half angle of the CPC in degree";
	parameter Real ratio_cpc_h=1 "ratio of CPC critical height [0.5,1]";
	parameter nSI.Angle_deg field_rim_angle=45 "rim angle of the heliostat field in the xOz plan in degree";
	parameter Real secref_fratio=0.6 "ratio of the foci distance and apex distance to the origin [0.5,1]";
	parameter SI.Length rec_z=0 "Polygon receiver z position, 0 is on the ground";   
	parameter SI.Length W_rcv=1.2 "Polygon receiver width";      
	parameter SI.Length H_rcv=10 "Polygon receiver length"; 
	parameter SI.Length H_tower = 65 "Tower height";  
           
    /*
    parameter SI.HeatFlowRate Q_in_rcv = 40e6;          
    // heliostat field    
    //parameter Real n_helios=300;    
    parameter SI.Length W_helio = 10 "width of heliostat in m";
    parameter SI.Length H_helio = 10 "height of heliostat in m";    

    parameter SI.Length R_tower = 0.01 "Tower diameter";
    parameter SI.Length R1=80 "distance between the first row heliostat and the tower";
    parameter Real fb=0.7 "factor to grow the field layout";
    parameter SI.Efficiency rho_helio = 0.9 "reflectivity of heliostat max =1";
    parameter SI.Angle slope_error = 2e-3 "slope error of the heliostat in mrad";    
    
    // secondary concentrator, cpc and receiver
 
    parameter Real n_CPC_faces=4 "2D-crossed cpc with n faces";
    parameter Real n_Z=30;    
               
    parameter SI.Efficiency refl_sec = 0.95 "reflectivity of the secondary reflector (hyperboloid)";
    parameter SI.Length secref_z = 30;
    
    parameter Real n_row_oelt = 5 "number of rows of the look up table (simulated days in a year)";
    parameter Real n_col_oelt = 5 "number of columns of the lookup table (simulated hours per day)";
    parameter Real n_rays = 5e6 "number of rays for the optical simulation";
    */
    
	parameter String ppath = Modelica.Utilities.Files.loadResource("modelica://SolarTherm/Resources/Include") "Absolute path to the Python script";
	parameter String pname = "run_solstice_beamdown" "Name of the Python script";
	parameter String pfunc = "run_simul" "Name of the Python functiuon"; 

    parameter String psave = Modelica.Utilities.Files.loadResource("modelica://SolarTherm/Resources/Include/solstice-result/demo") "the directory for saving the results"; 
    	parameter Integer argc =8 "Number of variables to be passed to the C function";

    parameter String tablefile(fixed=false);

    SI.Angle angle1;
    SI.Angle angle2;

  Modelica.Blocks.Tables.CombiTable2D nu_table(
    tableOnFile=true,
    tableName="optics",
    smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative,
    fileName=tablefile)
    annotation (Placement(transformation(extent={{12,12},{32,32}})));
  Modelica.Blocks.Sources.RealExpression angle2_input(y=to_deg(angle2))
    annotation (Placement(transformation(extent={{-38,6},{-10,26}})));
  Modelica.Blocks.Sources.RealExpression angle1_input(y=to_deg(angle1))
    annotation (Placement(transformation(extent={{-38,22},{-10,42}})));

initial algorithm
tablefile := SolsticePyFunc(ppath, pname, pfunc, psave, field_type, rcv_type, wea_file, argc, {"theta_deg", "ratio_cpc_h", "field_rim_angle", "secref_fratio", "rec_z", "W_rcv", "H_rcv", "H_tower" }, {theta_deg, ratio_cpc_h, field_rim_angle, secref_fratio, rec_z, W_rcv, H_rcv, H_tower}); 

equation
  if angles==SolarTherm.Types.Solar_angles.elo_hra then
    angle1=SolarTherm.Models.Sources.SolarFunctions.eclipticLongitude(dec);
    angle2=hra;
  elseif angles==SolarTherm.Types.Solar_angles.dec_hra then
    angle1=dec;
    angle2=hra;
  elseif angles==SolarTherm.Types.Solar_angles.ele_azi then
    angle1=SolarTherm.Models.Sources.SolarFunctions.elevationAngle(dec,hra,lat);
    angle2=SolarTherm.Models.Sources.SolarFunctions.solarAzimuth(dec,hra,lat);
  else
    angle1=SolarTherm.Models.Sources.SolarFunctions.solarZenith(dec,hra,lat);
    angle2=SolarTherm.Models.Sources.SolarFunctions.solarAzimuth(dec,hra,lat);
  end if;
  nu=max(0,nu_table.y);
  connect(angle2_input.y, nu_table.u2)
    annotation (Line(points={{-8.6,16},{10,16}}, color={0,0,127}));
  connect(angle1_input.y, nu_table.u1) annotation (Line(points={{-8.6,32},{2,32},
          {2,28},{10,28}}, color={0,0,127}));



end SolsticeOELTBeamdown;
