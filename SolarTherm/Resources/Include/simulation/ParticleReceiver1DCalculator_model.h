/* Simulation code for ParticleReceiver1DCalculator generated by the OpenModelica Compiler OpenModelica 1.15.0~dev-45-g634bc00. */
#if !defined(ParticleReceiver1DCalculator__MODEL_H)
#define ParticleReceiver1DCalculator__MODEL_H

#include "openmodelica.h"
#include "openmodelica_func.h"
#include "simulation_data.h"
#include "simulation/simulation_info_json.h"
#include "simulation/simulation_runtime.h"
#include "util/omc_error.h"
#include "simulation/solver/model_help.h"
#include "simulation/solver/delay.h"
#include "simulation/solver/linearSystem.h"
#include "simulation/solver/nonlinearSystem.h"
#include "simulation/solver/mixedSystem.h"

#if defined(__cplusplus)
extern "C" {
#endif

#include <string.h>

#include "ParticleReceiver1DCalculator_functions.h"

#define Modelica_Blocks_Tables__omcQuot_436F6D62695461626C65314473247061727469636C655265636569766572314424546162_getTableValue_index 0
#define Modelica_Blocks_Tables__omcQuot_436F6D62695461626C65314473247061727469636C655265636569766572314424546162_readTableData_index 1
#define Modelica_Blocks_Types_ExternalCombiTable1D_constructor_index 2
#define Modelica_Blocks_Types_ExternalCombiTable1D_destructor_index 3
#define Modelica_Fluid_Interfaces__omcQuot_466C756964506F72745F5F61246C69667453696D706C6524666C7569645F5F61_Medium_ThermodynamicState_index 4
#define Modelica_Fluid_Interfaces__omcQuot_466C756964506F72745F5F61247061727469636C655265636569766572314424666C7569645F5F61_Medium_ThermodynamicState_index 5
#define Modelica_Fluid_Interfaces__omcQuot_466C756964506F72745F5F62246C69667453696D706C6524666C7569645F5F62_Medium_ThermodynamicState_index 6
#define Modelica_Fluid_Interfaces__omcQuot_466C756964506F72745F5F62247061727469636C655265636569766572314424666C7569645F5F62_Medium_ThermodynamicState_index 7
#define Modelica_Fluid_Interfaces__omcQuot_466C756964506F7274735F5F622473696E6B24706F727473_Medium_ThermodynamicState_index 8
#define Modelica_Fluid_Interfaces__omcQuot_466C756964506F7274735F5F6224736F7572636524706F727473_Medium_ThermodynamicState_index 9
#define Modelica_Fluid_Sources__omcQuot_4669786564426F756E646172792473696E6B_Medium_ThermodynamicState_index 10
#define Modelica_Fluid_Sources__omcQuot_4669786564426F756E6461727924736F75726365_Medium_ThermodynamicState_index 11
#define Modelica_Fluid_Utilities_checkBoundary_index 12
#define Modelica_Media_IdealGases_Common_DataRecord_index 13
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F726424416972_index 14
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F7264244172_index 15
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F726424433248325F5F76696E796C6964656E65_index 16
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F72642443324834_index 17
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F726424433248354F48_index 18
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F72642443324836_index 19
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F726424433348365F5F70726F70796C656E65_index 20
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F72642443334838_index 21
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F72642443344831305F5F6E5F5F627574616E65_index 22
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F726424433448385F5F315F5F627574656E65_index 23
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F72642443354831305F5F315F5F70656E74656E65_index 24
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F72642443354831325F5F6E5F5F70656E74616E65_index 25
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F72642443364831325F5F315F5F686578656E65_index 26
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F72642443364831345F5F6E5F5F686578616E65_index 27
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F72642443364836_index 28
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F72642443374831345F5F315F5F68657074656E65_index 29
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F72642443374831365F5F6E5F5F68657074616E65_index 30
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F72642443384831305F5F657468796C62656E7A_index 31
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F72642443384831385F5F6E5F5F6F6374616E65_index 32
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F7264244348334F48_index 33
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F726424434834_index 34
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F726424434C32_index 35
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F726424434F_index 36
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F726424434F32_index 37
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F7264244632_index 38
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F7264244832_index 39
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F72642448324F_index 40
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F7264244865_index 41
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F7264244E32_index 42
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F7264244E324F_index 43
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F7264244E4833_index 44
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F7264244E4F_index 45
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F7264244E4F32_index 46
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F7264244E65_index 47
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F7264244F32_index 48
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F726424534F32_index 49
#define Modelica_Media_IdealGases_Common__omcQuot_446174615265636F726424534F33_index 50
#define Modelica_Media_Incompressible_TableBased_ThermodynamicState_index 51
#define Modelica_Media_Incompressible_TableBased_Polynomials__Temp_evaluate_index 52
#define Modelica_Media_Incompressible_TableBased_Polynomials__Temp_evaluateWithRange_index 53
#define Modelica_Media_Incompressible_TableBased_Polynomials__Temp_evaluate__der_index 54
#define Modelica_Media_Interfaces_Types_IdealGas_FluidConstants_index 55
#define Modelica_Media_Interfaces_Types_IdealGas__omcQuot_466C756964436F6E7374616E7473244E32_index 56
#define Modelica_SIunits_Conversions_to__degC_index 57
#define Modelica_Utilities_Streams_error_index 58
#define Modelica_Utilities_Strings_isEmpty_index 59
#define Modelica_Utilities_Strings_length_index 60
#define Modelica_Utilities_Strings_Advanced_skipWhiteSpace_index 61
#define SolarTherm_Media_SolidParticles_CarboHSP__utilities_T__h_index 62
#define SolarTherm_Media_SolidParticles_CarboHSP__utilities_h__T_index 63
#define SolarTherm_Models_CSP_CRS_function__1_index 64
#define SolarTherm_Models_CSP_CRS_Receivers__omcQuot_5061727469636C6552656365697665723144247061727469636C6552656365697665723144_MedAir_DryAirNasa_FluidConstants_index 65
#define SolarTherm_Models_CSP_CRS_Receivers__omcQuot_5061727469636C6552656365697665723144247061727469636C6552656365697665723144_MedAir_DryAirNasa_ThermodynamicState_index 66
#define SolarTherm_Models_CSP_CRS_Receivers__omcQuot_5061727469636C6552656365697665723144247061727469636C6552656365697665723144_MedAir_DryAirNasa_dynamicViscosity_index 67
#define SolarTherm_Models_CSP_CRS_Receivers__omcQuot_5061727469636C6552656365697665723144247061727469636C6552656365697665723144_MedAir_DryAirNasa_thermalConductivity_index 68

extern void ParticleReceiver1DCalculator_callExternalObjectDestructors(DATA *_data, threadData_t *threadData);
#if !defined(OMC_NUM_NONLINEAR_SYSTEMS) || OMC_NUM_NONLINEAR_SYSTEMS>0
extern void ParticleReceiver1DCalculator_initialNonLinearSystem(int nNonLinearSystems, NONLINEAR_SYSTEM_DATA *data);
#endif
#if !defined(OMC_NUM_LINEAR_SYSTEMS) || OMC_NUM_LINEAR_SYSTEMS>0
#endif
#if !defined(OMC_NUM_MIXED_SYSTEMS) || OMC_NUM_MIXED_SYSTEMS>0
#endif
#if !defined(OMC_NO_STATESELECTION)
extern void ParticleReceiver1DCalculator_initializeStateSets(int nStateSets, STATE_SET_DATA* statesetData, DATA *data);
#endif
extern int ParticleReceiver1DCalculator_functionAlgebraics(DATA *data, threadData_t *threadData);
extern int ParticleReceiver1DCalculator_function_storeDelayed(DATA *data, threadData_t *threadData);
extern int ParticleReceiver1DCalculator_updateBoundVariableAttributes(DATA *data, threadData_t *threadData);
extern int ParticleReceiver1DCalculator_functionInitialEquations(DATA *data, threadData_t *threadData);
extern int ParticleReceiver1DCalculator_functionInitialEquations_lambda0(DATA *data, threadData_t *threadData);
extern int ParticleReceiver1DCalculator_functionRemovedInitialEquations(DATA *data, threadData_t *threadData);
extern int ParticleReceiver1DCalculator_updateBoundParameters(DATA *data, threadData_t *threadData);
extern int ParticleReceiver1DCalculator_checkForAsserts(DATA *data, threadData_t *threadData);
extern int ParticleReceiver1DCalculator_function_ZeroCrossingsEquations(DATA *data, threadData_t *threadData);
extern int ParticleReceiver1DCalculator_function_ZeroCrossings(DATA *data, threadData_t *threadData, double* gout);
extern int ParticleReceiver1DCalculator_function_updateRelations(DATA *data, threadData_t *threadData, int evalZeroCross);
extern const char* ParticleReceiver1DCalculator_zeroCrossingDescription(int i, int **out_EquationIndexes);
extern const char* ParticleReceiver1DCalculator_relationDescription(int i);
extern void ParticleReceiver1DCalculator_function_initSample(DATA *data, threadData_t *threadData);
extern int ParticleReceiver1DCalculator_initialAnalyticJacobianG(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int ParticleReceiver1DCalculator_initialAnalyticJacobianA(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int ParticleReceiver1DCalculator_initialAnalyticJacobianB(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int ParticleReceiver1DCalculator_initialAnalyticJacobianC(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int ParticleReceiver1DCalculator_initialAnalyticJacobianD(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int ParticleReceiver1DCalculator_initialAnalyticJacobianF(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int ParticleReceiver1DCalculator_functionJacG_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int ParticleReceiver1DCalculator_functionJacA_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int ParticleReceiver1DCalculator_functionJacB_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int ParticleReceiver1DCalculator_functionJacC_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int ParticleReceiver1DCalculator_functionJacD_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int ParticleReceiver1DCalculator_functionJacF_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern const char* ParticleReceiver1DCalculator_linear_model_frame(void);
extern const char* ParticleReceiver1DCalculator_linear_model_datarecovery_frame(void);
extern int ParticleReceiver1DCalculator_mayer(DATA* data, modelica_real** res, short *);
extern int ParticleReceiver1DCalculator_lagrange(DATA* data, modelica_real** res, short *, short *);
extern int ParticleReceiver1DCalculator_pickUpBoundsForInputsInOptimization(DATA* data, modelica_real* min, modelica_real* max, modelica_real*nominal, modelica_boolean *useNominal, char ** name, modelica_real * start, modelica_real * startTimeOpt);
extern int ParticleReceiver1DCalculator_setInputData(DATA *data, const modelica_boolean file);
extern int ParticleReceiver1DCalculator_getTimeGrid(DATA *data, modelica_integer * nsi, modelica_real**t);
extern void ParticleReceiver1DCalculator_function_initSynchronous(DATA * data, threadData_t *threadData);
extern void ParticleReceiver1DCalculator_function_updateSynchronous(DATA * data, threadData_t *threadData, long i);
extern int ParticleReceiver1DCalculator_function_equationsSynchronous(DATA * data, threadData_t *threadData, long i);
extern void ParticleReceiver1DCalculator_read_input_fmu(MODEL_DATA* modelData, SIMULATION_INFO* simulationData);
extern void ParticleReceiver1DCalculator_function_savePreSynchronous(DATA *data, threadData_t *threadData);
extern int ParticleReceiver1DCalculator_inputNames(DATA* data, char ** names);
extern int ParticleReceiver1DCalculator_initializeDAEmodeData(DATA *data, DAEMODE_DATA*);
extern int ParticleReceiver1DCalculator_functionLocalKnownVars(DATA*, threadData_t*);
extern int ParticleReceiver1DCalculator_symbolicInlineSystem(DATA*, threadData_t*);

#include "ParticleReceiver1DCalculator_literals.h"




#if defined(HPCOM) && !defined(_OPENMP)
  #error "HPCOM requires OpenMP or the results are wrong"
#endif
#if defined(_OPENMP)
  #include <omp.h>
#else
  /* dummy omp defines */
  #define omp_get_max_threads() 1
#endif

#if defined(__cplusplus)
}
#endif

#endif /* !defined(ParticleReceiver1DCalculator__MODEL_H) */


