Import('env')
import shutil, os

senv = env.Clone()
senv.Append(
	CPPPATH = ['$OM_CPPPATH']
	,LIBPATH = ['$OM_LIBPATH']
	,LIBS = ['m'] + env['OM_LIBS']
)
conf = senv.Configure()
conf.CheckHeader('openmodelica.h')
senv = conf.Finish()

lib1 = senv.SharedLibrary('st_tables',[
	'st_tables.c'
	,'solinterp/interpolation.c'
	,'solinterp/symmetries.c'
	,'solinterp/tables.c'])

lib4 = senv.SharedLibrary('st_motab',[
	'st_motab.c'
	,'parse.c'])

penv = senv.Clone()

penv.ParseConfig('$PKGCONFIGPYTHON')
conf = penv.Configure()
if not conf.CheckHeader('Python.h'):
	print("Python.h is needed for building solartherm. Unable to continue.")
	Exit(1)
if not conf.CheckLib(penv['LIBS'],"Py_Initialize",'#include <Python.h>',autoadd=False):
	#print("CPPPATH =",penv.get('CPPPATH'))
	#print("LIBPATH =",penv.get('LIBPATH'))
	#import subprocess as sp
	#sp.run(penv.subst('$PKGCONFIGPYTHON'),SHELl=True)
	print("Unable to link to Python library. Unable to continue.")
	Exit(1)
penv = conf.Finish()

lib2 = penv.SharedLibrary('st_solsticepy',['run_py_func.c'])

# GLPK-linked bits...
genv = senv.Clone()
genv.Append(
	CPPPATH = ['$GLPK_CPPPATH']
	,LIBS = ['glpk','st_motab']
	,LIBPATH=['.','$GLPK_LIBPATH']
)
conf= genv.Configure()
if not conf.CheckHeader('glpk.h'):
	print("Unable to link to GLPK (required for optimal dispatch routines)")
	Exit(1)
else:
	env.AppendUnique(ST_LIBPATH=['$GLPK_LIBPATH'])

genv = conf.Finish()


lib3 = genv.SharedLibrary('st_linprog',['st_linprog.c','linprog/linprog.c'])

genv.Depends(lib3,lib4)

#Adding st_linprog_particle library for particle system - 17 October 2021 -- Philipe
lib6 = genv.SharedLibrary('st_linprog_particle',['st_linprog_particle.c','linprog_particle/linprog.c'])

#Tensorflow linked bits 19 October 2021 -- Philipe
#Clone the standard + python environment
tenv = penv.Clone()

#Adding tensorflow
tenv.Append(
	CPPPATH = ['$TF_CPPPATH']
	,LIBS = ["tensorflow"]
	,LIBPATH = ["$TF_LIBPATH"]
)

#Adding st_surrogate_single_output library for particle system - 19 October 2021 -- Philipe
lib7 = tenv.SharedLibrary('st_recv_surrogate_single_output',['st_recv_surrogate.c'])

tenv_mul = tenv.Clone()
lib8 = tenv.SharedLibrary('st_recv_surrogate_multi_output',['st_recv_surrogate_multi.c'])


#On the fly surrogate bits 21 October 2021 -- Philipe
fenv = tenv.Clone() #Python + tensorflow already included
fenv.Append(
	CPPPATH = ["$SSC_CPPPATH", '$TF_CPPPATH']
	,LIBS = ["m","gsl","gslcblas","dl","ssc"] #Original libs are Library = {"m","gsl","gslcblas","python2.7","tensorflow","dl","ssc"} however since python2.6 and TF are already in tenv, so it can be passed
	,LIBPATH = ["$SSC_LIBPATH","$TF_LIBPATH"]
)

lib9 = fenv.SharedLibrary('st_otf_surrogate',[
	'st_otf_surrogate.c'
	,'otf/kriging.c'
	,'otf/ann.c'
	,'otf/util.c'
	,'otf/sscpb.c'
#	'otf-surrogate/otfreceiver.c
	])

#Appending the libs
shlibs = [lib1, lib4, lib2, lib3, lib6, lib7, lib8, lib9]
pysrcs = [
	'st_test_ext.py',
	'run_solstice.py',
	'run_solstice_windy.py',
	'gatherdata.py',
	'libgatherdata.py',
	'gen_OD_matrix.py',
	'python_lib.py',
	'trainANN.py',
	'gen_receiver_off_design.py',
	'trainANNReceiver.py',
	'libANN.py'
]

# this is the location that st_simulate etc will use
env.Install('$INSTALL_OM_EXT',shlibs + pysrcs)

# this is the location that you probably want to use with OMEdit
# TODO examine option of placing these things in ~/.openmodelica/binaries ...?
env.Install('#/SolarTherm/Resources/Library',shlibs + pysrcs) 

#Workaround from using shutil since in shutil for python3.6, arg dirs_exist_ok does not exist
'''
#Install all the Tensorflow files
owd = os.getcwd()

folders = ['configurations','neural-network','simulation', 'training_data']

os.chdir("../../")
cwd = os.getcwd()

for f in folders:
	dirname = "%s/%s"%(owd,f)
	dst = "%s/SolarTherm/Resources/Library/%s"%(cwd,f)
	print("Copying %s to %s for surrogate modelling"%(dirname, dst))
	shutil.copytree(dirname, dst, dirs_exist_ok=True)

os.chdir(owd)
'''

# vim: ts=4:sw=4:noet:tw=123:syntax=python
