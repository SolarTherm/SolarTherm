Import('env')
import shutil, os

senv = env.Clone()
senv.Append(
	CPPPATH = ['$OM_CPPPATH']
	,LIBPATH = ['$OM_LIBPATH']
	,LIBS = ['m'] + env['OM_LIBS']
)
conf = senv.Configure()
conf.CheckHeader('openmodelica.h')
senv = conf.Finish()

lib1 = senv.SharedLibrary('st_tables',[
	'st_tables.c'
	,'solinterp/interpolation.c'
	,'solinterp/symmetries.c'
	,'solinterp/tables.c'])


penv = senv.Clone()

penv.ParseConfig('$PKGCONFIGPYTHON')
conf = penv.Configure()
if not conf.CheckHeader('Python.h'):
	print("conf.env.CPPPATH =",conf.env['CPPPATH'])
	print("Python.h is needed for building solartherm. Unable to continue.")
	Exit(1)
if not conf.CheckLib(penv['LIBS'],"Py_Initialize",'#include <Python.h>',autoadd=False):
	#print("CPPPATH =",penv.get('CPPPATH'))
	#print("LIBPATH =",penv.get('LIBPATH'))
	#import subprocess as sp
	#sp.run(penv.subst('$PKGCONFIGPYTHON'),SHELl=True)
	print("Unable to link to Python library. Unable to continue.")
	Exit(1)
penv = conf.Finish()

lib2 = penv.SharedLibrary('st_solsticepy',['run_py_func.c'])

lib4 = penv.SharedLibrary('st_storage', ['run_storage_py.c'])

# GLPK-linked bits...
genv = senv.Clone()
genv.Append(
	CPPPATH = ['$GLPK_CPPPATH']
	,LIBS = ['glpk']
	,LIBPATH=['$GLPK_LIBPATH']
)
conf= genv.Configure()
if not conf.CheckHeader('glpk.h'):
	print("Unable to link to GLPK (required for optimal dispatch routines)")
	Exit(1)
else:
	env.AppendUnique(ST_LIBPATH=['$GLPK_LIBPATH'])

genv = conf.Finish()

lib3 = genv.SharedLibrary('st_linprog',['st_linprog.c','linprog/linprog.c'])


shlibs = [lib1,lib2,lib3,lib4]
pysrcs = ['st_test_ext.py','run_solstice.py', 'run_storage.py']

# this is the location that st_simulate etc will use
env.Install('$INSTALL_OM_EXT',shlibs + pysrcs)

# this is the location that you probably want to use with OMEdit
# TODO examine option of placing these things in ~/.openmodelica/binaries ...?
env.Install('#/SolarTherm/Resources/Library',shlibs + pysrcs)

# vim: ts=4:sw=4:noet:tw=80
