#!/usr/bin/python
from __future__ import division

import argparse

unit_map = {
		'': ('', 1.),
		'none': ('', 1.),
		'MWh': ('J', 3600.*1e6),
		'MWht': ('J', 3600.*1e6),
		'MWhe': ('J', 3600.*1e6),
		'MWt': ('W', 1e6),
		'MWe': ('W', 1e6),
		}

word_map = {
		'Cycle': 'c',
		'cycle': 'c',
		'Field': 'f',
		'field': 'f',
		'TES': 't',
		'based': 'b',
		'Resource': 'r',
		'efficiency': 'eff',
		'temperature': 'T',
		'temp.': 'T',
		'thermal': 'th',
		'electrical': 'ele',
		'power': 'P',
		'Power': 'P',
		'energy': 'E',
		'generated': 'gen',
		'gross': 'gro',
		'Month': 'mon',
		'correction': 'corr',
		'parasitics': 'par',
		'parasitic': 'par',
		'collector': 'coll',
		'optical': 'opt',
		'startup': 'st',
		'solar': 'sol',
		'Solar': 'sol',
		'min.': 'min',
		'max.': 'max',
		'requirement': 'req',
		'horizontal': 'hor',
		'storage': 'stor',
		'Pressure': 'p',
		'Offline': 'off',
		'Online': 'on',
		'available': 'avail',
		'Production': 'prod',
		'produced': 'prod',
		'irradiance': 'irr',
		'Diffuse': 'diff',
		'losses': 'loss',
		'output': 'out',
		'dumped': 'dump',
		'total': 'tot',
		'Azimuth': 'azi',
		'Zenith': 'zen',
		'Speed': 'spd',
		}

def remove_quoted_delim(s, quote, delim):
	ns = ''
	i = s.find(quote)
	if i == -1:
		ns += s[0:]
	while i != -1:
		j = s.find(quote, i+1)

		if j != -1:
			ns += s[0:i] + s[i:j].replace(delim, '')
			s = s[j+1:]
		else:
			ns += s[0:]
			s = ''

		i = s.find(quote)
		if i == -1:
			ns += s[0:]
	return ns

def sam_csv_conv(fn, t_offset=0., t_step=3600.):
	f = open(fn)
	delim = ','
	header = remove_quoted_delim(f.readline(), '"', ',').split(delim)

	factors = []
	nheader = []
	for label in header:
		l = label.split('|')

		long_name = l[0].strip().strip('"').replace('(', '').replace(')', '').replace('-', ' ')
		name = ''
		for word in long_name.split():
			if name != '':
				name += '_'
			name += word_map.get(word, word)

		unit = ''
		if len(l) > 1:
			unit = l[1].strip().strip('"()')

		unit, factor = unit_map.get(unit, (unit, 1.0))

		if name == '':
			name = 'time'
			unit = 's'

		factors.append(factor)
		nheader.append(name + ' (' + unit + ')')
	
	print(','.join(nheader))

	for i, line in enumerate(f.readlines()):
		l = remove_quoted_delim(line, '"', ',').split(delim)
		vals = []
		for j, v in enumerate(l):
			if j == 0:
				vals.append(str(t_offset + i*t_step))
			else:
				vals.append(str(float(v)*factors[j]))
		print(','.join(vals))

if __name__ == '__main__':
	parser = argparse.ArgumentParser()
	parser.add_argument('file',
			help='SAM hourly data csv file to convert')
	parser.add_argument('--offset', type=float, default=-1800.,
			help='Time offset to apply to data (-1800 default)')
	# A default of -1800 works for comparing with SolarTherm data that uses
	# TMY files that start at 3600 from start of year.  This is because even
	# though the first time point is 0, the solar positions are actually
	# calculated at 1800.
	args = parser.parse_args()

	sam_csv_conv(args.file, t_offset=args.offset)
