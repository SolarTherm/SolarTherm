#!/usr/bin/python

from solartherm.dakota import gen_dakota_in, gen_interface_bb, UncertaintyDakotaIn
from solartherm import simulation
from solartherm import params
import multiprocessing as mp
import numpy as np
import time
import os
import argparse
import itertools
import subprocess

if __name__=='__main__':
	parser = argparse.ArgumentParser()	

	parser.add_argument('file',
			help='model file name')	
	parser.add_argument('-v', action='store_true',
			help='verbose')
	parser.add_argument('--start', type=str, default='0',
			help='simulation start time: <number>[,y,d,m,s]')
	parser.add_argument('--stop', type=str, default='1y',
			help='simulation stop time: <number>[,y,d,m,s]')
	parser.add_argument('--step', type=str, default='5m',
			help='simulation time step: <number>[,y,d,m,s]')
	parser.add_argument('--tolerance', type=str, default='1e-04',
			help='simulation tolerance: <number>')
	parser.add_argument('--initStep', type=str, default=None,
			help='simulation initial step size used by dassl and ida methods: <number>[,y,d,m,s]')
	parser.add_argument('--maxStep', type=str, default=None,
			help='simulation maximum absolute step size used by dassl and ida methods: <number>[,y,d,m,s]')
	parser.add_argument('--integOrder', type=str, default='5',
			help='simulation maximum integration order used by dassl and ida methods: <number>')
	parser.add_argument('--solver', type=str, default='dassl',
			help='solver choice for OpenModelica')
	parser.add_argument('--nls', type=str, default='homotopy',
			help='non-linear solver choice for OpenModelica e.g. newton, hybrid, kinsol, mixed, and homotopy')
	parser.add_argument('--lv', type=str, default='-LOG_SUCCESS,-stdout',
			help='a comma-separated String list specifing which logging levels to enable, e.g. LOG_DASSL,LOG_SOLVER etc')
	parser.add_argument('--fuel', action='store_true',
			help='run post-processing calculations for levelised cost of fuel')	
	parser.add_argument('--np', type=int, default=mp.cpu_count(),
			help='number of processes (set to 0 for serial mode)')	
	parser.add_argument('--excel', type=str, default=None,
			help='the directry of the input excel data sheet')
	parser.add_argument('--peaker', action='store_true',
			help='peaker configuration')
	parser.add_argument('--runsolstice', action='store_true',
			help='run solstice mcrt')
	parser.add_argument('--mode', type=str, default='uncertainty',
			help='type of study: uncertainty, parametric or optimisation')
	parser.add_argument('--sample', type=str, default='lhs',
			help='sampling method, e.g. lhs or random')
	parser.add_argument('--ns', type=int, default=10,
			help='number of samples')
	parser.add_argument('--dist', type=str, default='uniform',
			help='distribution of variables, e.g. uniform, normal, pert etc')
	parser.add_argument('par', metavar='P', type=str, nargs='*',
			help='parameters with bounds and optional starting value in form PNAME=LOW,HIGH[,START]')
	parser.add_argument('--wd', type=str, default='.',
			help='the working directory')
	parser.add_argument('--restart', type=str, default=None,
			help='restart by continuing the last simulation (available now only via dakota), given the directory of the simulations')

	args = parser.parse_args()

	fn=os.path.abspath(args.file)
	mn=os.path.splitext(os.path.split(fn)[1])[0] # model name

	if args.fuel:
		system='FUEL'
	else:
		system='ELECTRICITY'

	if not os.path.exists(args.wd):
		os.makedirs(args.wd)	
	if not os.path.isabs(args.wd):
		savedir=os.path.join(os.getcwd(),args.wd)
	else:
		savedir=args.wd

	os.chdir(args.wd)
	U=UncertaintyDakotaIn(mofn=fn, start=args.start, stop=args.stop, 
		step=args.step, initStep=args.initStep, maxStep=args.maxStep, 
		integOrder=args.integOrder, solver=args.solver, nls=args.nls, lv=args.lv, 
		system=system, runsolstice=args.runsolstice)


	if args.excel!=None:
		if not os.path.exists(mn):
			sim = simulation.Simulator(fn=fn, fusemount=False)
			sim.compile_model()
			sim.compile_sim(args=['-s'])
		input_xml=mn+'_init.xml'
		tree=params.Tree()
		tree.load_xml(input_xml)
		params.load_values_from_excel(args.excel, tree)
		tree.write_xml(input_xml)


		par_n=tree.filter_type(1) # 1 is for uncertainty analysis
		par_uniform=tree.filter_dist('uniform',par_n)
		par_normal=tree.filter_dist('normal', par_n)
		par_pert=tree.filter_dist('pert', par_n)

		#uniform
		if len(par_uniform)>0:
			lb=[]
			ub=[]
			for n in par_uniform:
				b1=tree.get(n+'.boundary1')
				b2=tree.get(n+'.boundary2')
				lb.append(b1)
				ub.append(b2)
			U.uniform(par_uniform, lb, ub)
		# normal
		if len(par_normal)>0:
			mean=[]
			stdev=[]
			for n in par_normal:
				m=tree.get(n+'.nominal')
				sd=tree.get(n+'.boundary1')
				mean.append(m)
				stdev.append(sd)
			U.normal(par_normal, mean, stdev)
		# pert
		if len(par_pert)>0:
			nominals=[]
			lb=[]
			ub=[]
			for n in par_pert:
				nominal=tree.get(n+'.nominal')	
				b1=tree.get(n+'.boundary1')
				b2=tree.get(n+'.boundary2')	
				nominals.append(nominal)
				lb.append(b1)
				ub.append(b2)
			U.pert(par_pert, nominals, lb, ub)

	else:
		# if the parameters are passed from the command line directly
		# (not from the spreadsheet)
		# all the parameters are in the same distribution
		dist_type=args.dist
		par_n = [] # names
		b1 = [] # bounds
		b2 = []
		nominals =[]
		for pp in args.par:
			k, v = pp.split('=')
			par_n.append(k)
			vals = [(vv) for vv in v.split(',')]
			if dist_type=='uniform':
				lb=vals[0]
				ub=vals[1]
				b1.append(lb)				
				b2.append(ub)
			elif dist_type=='normal':
				mean=vals[0]
				sd=vals[1]
				nominals.append(mean)
				b1.append(sd)
			elif dist_type=='pert':
				nominal=float(vals[0])
				lb=float(vals[1])
				ub=float(vals[2])
				b1.append(lb)				
				b2.append(ub)	
				nominals.append(nominal)		
		if dist_type=='uniform':
			print 'uniform'
			U.uniform(par_n, b1, b2)
		elif dist_type=='normal':
			U.normal(par_n, nominals, b1)
		elif dist_type=='pert':
			U.pert(par_n, nominals, b1, b2)
	variables=U.variables
	response=U.response()
	method=U.method(sample_type=args.sample, num_sample=args.ns)

	gen_dakota_in( response=response, method=method, variables=variables, savedir=savedir)
	gen_interface_bb(savedir)

	subprocess.call('chmod a+x %s/interface_bb.py'%savedir, shell=True)

	if args.restart!=None:
		os.chdir(args.restart)
		if args.np!=0:
			if not os.path.exists(mn):
				sim = simulation.Simulator(fn=fn, fusemount=False)
				sim.compile_model()
				sim.compile_sim(args=['-s'])
			subprocess.call('mpirun -np %s dakota -i sample.in -o sample.out > sample.stdout -read_restart dakota.rst'%args.np, shell=True)
		else:
			subprocess.call('dakota -i sample.in -o sample.out > sample.stdout -read_restart dakota.rst', shell=True)


	else:
		if args.np!=0:
			if not os.path.exists(mn):
				sim = simulation.Simulator(fn=fn, fusemount=False)
				sim.compile_model()
				sim.compile_sim(args=['-s'])
			subprocess.call('mpirun -np %s dakota -i sample.in -o sample.out > sample.stdout'%args.np, shell=True)
		else:
			subprocess.call('dakota -i sample.in -o sample.out > sample.stdout', shell=True)
	

	


	
