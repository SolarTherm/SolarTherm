#! /bin/env python
from __future__ import division
import argparse
import os
import functools
from solartherm import postproc
from solartherm import simulation
from solartherm import params
from solartherm.optimisation import *
from solartherm.dakota import gen_dakota_in, gen_interface_bb, OptimisationDakotaIn

import DyMat
import numpy as np
import subprocess
import time

import multiprocessing as mp
import matplotlib.pyplot as plt

t_start = time.time()


def objective_function(sim, mat_fn, stime, initStep, maxStep, integOrder, solver, nls, lv, verb, scale, offset, perf_i, par_n, resultclass, op_meth, obj_n, obj_sign, par_val):

	par_v = [str(v*scale[i] + offset[i]) for i, v in enumerate(par_val)]
	sim.update_pars(par_n, par_v)
	sim.simulate(start=stime[0], stop=stime[1], step=stime[2], initStep=initStep, maxStep=maxStep, integOrder=integOrder, solver=solver, nls=nls, lv=lv)

	num_obj=len(obj_n) # number of objective functions
	
	if len(perf_i)==0: # objective(s) value not in ['epy', 'lcoe', 'capf', 'srev']
		res=DyMat.DyMatFile(mat_fn)
		objs=[]
		for i in range(num_obj):
			name=obj_n[i]
			sign=obj_sign[i]
			objs.append(sign*res.data(name)[0])
	else:
		res = resultclass(mat_fn)
		perfs=res.calc_perf()
		constr, distance = res.constrained_optimisation() # constr is true if optimisattion is constrained. distance to be added to a constant penalty offset	
		objs=[]
		for i in range(num_obj):
			obj=obj_sign[i]*perfs[perf_i[i]]
 			# TODO seems it did not specify the sign for nsga2 in the previous version
			# but seems it was hard coded
			# obj_min is always in front of obj_max in the return
			#obj=perfs[perf_i[i]]
			objs.append(obj)

		if constr:
			for i in range(num_obj):
				obj=obj_sign[i]*(9.999e+99 + distance)
				objs.append(obj)
			print "A constraint is violated at this design point!"

	if verb:
		print(par_v)
		print(objs)

	if num_obj==1:
		if op_meth=='ga2':
			return objs[0],
		else:
			return objs[0]
	else:
		return objs


if __name__ == '__main__':
	"""
	Should make sure parameters are not final (protected), or that other
	derived parameters are final.
	"""
	parser = argparse.ArgumentParser()
	parser.add_argument('file',
			help='model file name')
	parser.add_argument('-v', action='store_true',
			help='verbose')
	parser.add_argument('--nomc', action='store_true',
			help='no model compilation')
	parser.add_argument('--nosc', action='store_true',
			help='no simulation compilation')
	parser.add_argument('--noc', action='store_true',
			help='no compilation at all (--nomc and --nosc)')
	parser.add_argument('--start', type=str, default='0',
			help='simulation start time: <number>[,y,d,m,s]')
	parser.add_argument('--stop', type=str, default='1y',
			help='simulation stop time: <number>[,y,d,m,s]')
	parser.add_argument('--step', type=str, default='5m',
			help='simulation time step: <number>[,y,d,m,s]')
	parser.add_argument('--initStep', type=str, default=None,
			help='simulation initial step size used by dassl and ida methods: <number>[,y,d,m,s]')
	parser.add_argument('--maxStep', type=str, default=None,
			help='simulation maximum absolute step size used by dassl and ida methods: <number>[,y,d,m,s]')
	parser.add_argument('--integOrder', type=str, default='5',
			help='simulation maximum integration order used by dassl and ida methods: <number>')
	parser.add_argument('--solver', type=str, default='dassl',
			help='solver choice for OpenModelica')
	parser.add_argument('--nls', type=str, default='homotopy',
			help='non-linear solver choice for OpenModelica e.g. newton, hybrid, kinsol, mixed, and homotopy')
	parser.add_argument('--lv', type=str, default='-LOG_SUCCESS,-stdout',
			help='a comma-separated String list specifing which logging levels to enable, e.g. LOG_DASSL,LOG_SOLVER etc')
	parser.add_argument('--method', type=str, default='Nelder-Mead',
			help='pso,  cma, ga1, ga2, nsga2 or one of the scipy optimisation methods')
	parser.add_argument('--maxiter', type=int, default=20,
			help='maximum number of iterations (not necessarily number of simulations)')
	parser.add_argument('--objective', type=str, default='lcoe',
			help='quantity to conduct a single (i.e. minimisation(- or nothing) or maximisation(+)) or multi-objective optimisation (produced by post processing) in form of objective=lcoe,+capf,+epy or objective=+capf,-lcoe, note that the "-" sign cannot be placed for the first objective')
	parser.add_argument('par', metavar='P', type=str, nargs='*',
			help='parameters with bounds and optional starting value in form PNAME=LOW,HIGH[,START]')
	parser.add_argument('--fuel', action='store_true',
			help='run post-processing calculations for levelised cost of fuel')
	#parser.add_argument('--framework', type=str, default='soo_min',
	#		help='soo_min, soo_max or moo, being single objective minimisation, single objective maximisation, or multi-objective optimisation respectively')
	parser.add_argument('--outfile_f',  type=str, default=None,
			help='save final optimal solution and objective(s) to outfile_f')
	parser.add_argument('--outfig',  type=str, default=None,
			help='save figure to outfig instead of displaying')
	parser.add_argument('--outfile_p',  type=str, default=None,
			help='save pareto optimal solutions of multi-objective optimisation to outfile_p')
	parser.add_argument('--dm',  type=str, default='linmap',
			help='Decision-making methods for the multi-objective optimisation framework: linmap, topsis')
	parser.add_argument('--excel', type=str, default=None,
			help='the directry of the input excel data sheet')
	parser.add_argument('--wd', type=str, default='.',
			help='the working directory')
	parser.add_argument('--np', type=int, default=mp.cpu_count(),
			help='number of processes (set to 0 for serial mode)')	


	args = parser.parse_args()

	fn=os.path.abspath(args.file)
	mn=os.path.splitext(os.path.split(fn)[1])[0] # model name


	if not os.path.exists(args.wd):
		os.makedirs(args.wd)	
	if not os.path.isabs(args.wd):
		savedir=os.path.join(os.getcwd(),args.wd)
	else:
		savedir=args.wd
	os.chdir(args.wd)

	if args.fuel:
		resultclass = postproc.SimResultFuel
	else:
		resultclass = postproc.SimResultElec


	sim = simulation.Simulator(fn, fusemount=False)

	if not os.path.exists(mn):
		print('Compiling model')
		sim.compile_model()
		print('Compiling simulator')
		sim.compile_sim(args=([] if args.v else ['-s']))

	mat_fn = sim.model + '_res.mat'

	print "\n\n\nObjective        method: ", args.method

	obj_collect = args.objective.split(",") # A list of objective(s) name in string
	obj_sign=[] # sign for the optimisation, 1 is to minimise, -1 is to maximise
	obj_n=[] # names of the objectives, e.g. lcoe, capf etc
	i=0
	for n in obj_collect:
		if n[0]=='+':
			obj_sign.append(-1.)
			obj_n.append(n[1:])
			goal='maximise'
		elif n[0]=='-':
			obj_sign.append(1.)
			obj_n.append(n[1:])
			goal='minimise'
		else:
			obj_sign.append(1.)
			obj_n.append(n)
			goal='minimise'

		print 'Objective        function: ',i+1, goal, obj_n[i]
		i+=1


	perf_i = [] # perfromance index
	for n in obj_n:
		if n in resultclass.perf_n:
			perf_i.append(resultclass.perf_n.index(oo))
		else:
			print '    Note: objective(s) value not in '+ str(resultclass.perf_n)
			

	num_obj=len(obj_n)

	sim.load_init() # Load in init XML

	if args.excel!=None:

		input_xml=mn+'_init.xml'
		tree=params.Tree()
		tree.load_xml(input_xml)
		params.load_values_from_excel(args.excel, tree)	

		par_n=tree.filter_type(2) # 2 is for optimisation
		par_0=[]
		lb=[]
		ub=[]
		for n in par_n:
			nominal=tree.get(n+'.nominal')	
			b1=tree.get(n+'.boundary1')
			b2=tree.get(n+'.boundary2')	
			par_0.append(nominal)
			lb.append(b1)
			ub.append(b2)

	else:

		par_n = [] # names
		par_0 = [] # start
		par_b = [] # bounds
		nominals=[] # nominal values for DAKOTA inputs
		LB = [] # lower bounds
		UB = [] # upper bounds

		offset = []
		scale = []

		for pp in args.par:
			k, v = pp.split('=')
			par_n.append(k)
			vals = [simulation.parse_var_val(vv, sim.get_unit(k))
				for vv in v.split(',')]
			assert len(vals) >= 2, 'Expected parameter bounds + optional start value'

			lb = vals[0]
			ub = vals[1]
			assert lb <= ub, 'Lower bound greater than upper bound'
			LB.append(lb)				
			UB.append(ub)

			if len(vals) == 3:
				p0 = vals[2]
			else:
				p0 = (ub + lb)/2	
			nominals.append(p0)
	
			#par_0.append(p0)

			offset.append(lb)
			scale.append((ub - lb))
			par_b.append([0, 1])
			par_0.append((p0 - lb)/(ub - lb))

	print "Optimisation parameter(s): ", par_n, "\n"

	objfunc = functools.partial(objective_function, sim, mat_fn,
			(args.start, args.stop, args.step), args.initStep,
			args.maxStep, args.integOrder, args.solver, args.nls, args.lv,
			args.v, scale, offset, perf_i, par_n, resultclass, args.method, obj_n, obj_sign)

	if num_obj==1:

		if args.method == 'pso':
			res, cand=st_pso(objfunc, par_b, args.maxiter, scale, offset)

		elif args.method == 'cma':
			res, cand=st_cma(objfunc, par_b, par_0, args.maxiter, scale, offset)

		elif args.method == 'ga1':
			res, cand=st_ga1(objfunc, par_b, par_n, scale, offset)

		elif args.method == 'ga2':
			res, cand=st_ga2(objfunc, par_b, par_n, scale, offset)

		else: # Use one of the scipy optimisation methods. For single-objective maximisation use one of L-BFGS-B, TNC or SLSQP.
			if goal=='maximise':
				method='L-BFGS-B'
			else:
				method=args.method
				
			res, cand= st_sciopt(objfunc, method, par_b, par_0, args.maxiter, scale, offset)

		if args.outfile_f is not None:
			f = open(args.outfile_f, 'w') # Example: outfile_f = ../examples/result.txt
			f.write("Optimal design parameters: " + str(cand) + '\n')
			f.write("Optimal objective function: " + str(obj_sign[0]* res))
			f.close()

		print "Optimal design parameters: ", cand
		print "Optimal objective function: ", obj_sign[0]* res


	else:

		if args.method == 'nsga2':	

			decisionmaker= postproc.DecisionMaker # Decision-maker classs instance
			dm_method = args.dm

			cands, front, dm=st_nsga2(objfunc, obj_n, par_b, par_n, scale, offset, dm_method, decisionmaker)

			# Save the optimal solutions to a text file
			if args.outfile_p is not None:
				f = open(args.outfile_p, 'w') # Example: outfile_p = ../examples/result.txt
				for nn in par_n:
					f.write("%s " % nn)
				for ii in obj_n:
					f.write("%s " % ii)
				f.write("\n")
				np.savetxt(f, np.c_[cands,front],delimiter=' ')
				f.close()

			if dm_method == 'linmap':
				best_ind, best_fitness = dm.linmap()
			else:
				assert(dm_method == 'topsis'), "Decision-making methods must be one of linmap or topsis!"
				best_ind, best_fitness = dm.topsis()

			if args.outfile_f is not None:
				f = open(args.outfile_f, 'w') # Example: outfile_f = ../examples/result.txt
				f.write("Final optimal design parameters: " + str(best_ind) + '\n')
				f.write("Final optimal objective functions: " + str(best_fitness))
				f.close()
			else:
				print "Final optimal design parameters: ", (best_ind)
				print "Final optimal objective functions: ", (best_fitness)

			t_end = time.time() # NOTE: the clock does not work on the multicored version!
			t_dur = t_end - t_start # Time elapsed to (succesfully) finish the optimisation
			print "\n\nTotal time elapsed: ", t_dur, "seconds."


			# Plot the Pareto Front
			fig = plt.figure()
			fig.add_subplot(111)

			plt.scatter(front[:,0], front[:,1], c="b", marker='*')
			plt.title('Pareto Front', loc='center')
			plt.axis("tight")
			obj_unit=[] # objective unit

			for i in range(num_obj):
				if len(perf_i)>0:
					obj_unit.append(resultclass.perf_u[perf_i[i]])
				else:
					obj_unit.append('')

			plt.xlabel(obj_n[0] + " (" + obj_unit[0] + ")")
			plt.ylabel(obj_n[1] + " (" + obj_unit[1] + ")")

			plt.grid(True,color='0.5', linestyle='--', linewidth=0.5)
			if args.outfig is not None:
				fig.savefig(args.outfig, dpi=600) # Example: outfig = ../examples/ParetoFront.png
			else:
				plt.show(block=True)


		elif args.method=='dakota_moga':
	
				opt=OptimisationDakotaIn()
				# TODO at the moment, all the setting are default
				# need to implement parameters to change the settings
				# TODO at the moment, the modelica solver, time steps were not user specified in the DAKOTA program
				# need to put those as inputs to the DAKOTA as well 
				opt.moga()
				method=opt.method
				response=opt.response(num_obj=num_obj)
				variables=opt.variables(var_names=par_n, nominals=nominals, maximum=UB, minimum=LB, mofn=fn, perf_i=perf_i, perf_name=obj_n, perf_sign=obj_sign, fuel=args.fuel)

				gen_dakota_in(response=response, method=method, variables=variables,savedir=savedir)
				gen_interface_bb(savedir)

				subprocess.call('chmod a+x %s/interface_bb.py'%savedir, shell=True)

				if args.np!=0:
					if not os.path.exists(mn):
						sim = simulation.Simulator(fn=fn, fusemount=False)
						sim.compile_model()
						sim.compile_sim(args=['-s'])
					subprocess.call('mpirun -np %s dakota -i sample.in -o sample.out > sample.stdout'%args.np, shell=True)
				else:
					subprocess.call('dakota -i sample.in -o sample.out > sample.stdout', shell=True)



t_end=time.time()
print('Total time (s)', t_end-t_start)
