#! /bin/env python
from __future__ import division
import argparse
import os
import functools
from solartherm import postproc
from solartherm import simulation

try:
	from scipy import optimize as sciopt
except ImportError:
	sciopt = None
try:
	from pyswarm import pso
except ImportError:
	pso = None
try:
	import cma
except ImportError:
	cma = None

# TODO: add flag for maximisation (e.g., to use capacity factor)

#	cfunc = functools.partial(cost_function, sim, mat_fn,
#			(args.start, args.stop, args.step),
#			args.v, scale, offset, perf_i, par_n)

def cost_function(sim, mat_fn, stime, verb, scale, offset, perf_i, par_n, resultclass, par_val):
	par_v = [str(v*scale[i] + offset[i]) for i, v in enumerate(par_val)]
	sim.update_pars(par_n, par_v)
	sim.simulate(start=stime[0], stop=stime[1], step=stime[2])

	res = resultclass(mat_fn)
	cost = res.calc_perf()[perf_i]

	if verb:
		print(par_v)
		print(cost)

	return cost

if __name__ == '__main__':
	"""
	Should make sure parameters are not final (protected), or that other
	derived parameters are final.
	"""
	parser = argparse.ArgumentParser()
	parser.add_argument('file',
			help='model file name')
	parser.add_argument('-v', action='store_true',
			help='verbose')
	parser.add_argument('--nomc', action='store_true',
			help='no model compilation')
	parser.add_argument('--nosc', action='store_true',
			help='no simulation compilation')
	parser.add_argument('--noc', action='store_true',
			help='no compilation at all (--nomc and --nosc)')
	parser.add_argument('--start', type=str, default='0',
			help='simulation start time: <number>[,y,d,m,s]')
	parser.add_argument('--stop', type=str, default='1y',
			help='simulation stop time: <number>[,y,d,m,s]')
	parser.add_argument('--step', type=str, default='5m',
			help='simulation time step: <number>[,y,d,m,s]')
	parser.add_argument('--method', type=str, default='Nelder-Mead',
			help='cma, pso or one of the scipy optimisation methods')
	parser.add_argument('--maxiter', type=int, default=20,
			help='maximum number of iterations (not necessarily number of simulations)')
	parser.add_argument('--cost', type=str, default='lcoe',
			help='quantity to minimise (produced by post processing)')
	parser.add_argument('par', metavar='P', type=str, nargs='*',
			help='parameters with bounds and optional starting value in form PNAME=LOW,HIGH[,START]')
	parser.add_argument('--fuel', action='store_true',
			help='run post-processing calculations for levelised cost of fuel')			
	args = parser.parse_args()

	sim = simulation.Simulator(args.file);

	if not args.noc:
		if not args.nomc:
			print('Compiling model')
			sim.compile_model()
		if not args.nosc:
			print('Compiling simulator')
			sim.compile_sim(args=([] if args.v else ['-s']))

	if args.fuel:
		resultclass = postproc.SimResultFuel
	else:
		resultclass = postproc.SimResultElec

	sim.load_init()

	par_n = [] # names
	par_b = [] # bounds
	par_0 = [] # start
	offset = []
	scale = []
	# Don't need bounds (pass None for variable to minimize)
	for pp in args.par:
		k, v = pp.split('=')
		par_n.append(k)
		vals = [simulation.parse_var_val(vv, sim.get_unit(k))
			for vv in v.split(',')]
		assert len(vals) >= 2, 'Expected parameter bounds + optional start value'
		lb = vals[0]
		ub = vals[1]
		assert lb <= ub, 'Lower bound greater than upper bound'
		#par_b.append([lb, ub])
		p0 = (ub + lb)/2
		if len(vals) == 3:
			p0 = vals[2]
		#par_0.append(p0)
		offset.append(lb)
		scale.append((ub - lb))
		par_b.append([0, 1])
		par_0.append((p0 - lb)/(ub - lb))

	mat_fn = sim.model + '_res.mat'

	try:
		perf_i = resultclass.perf_n.index(args.cost)
	except ValueError:
		raise ValueError('Cost value should be one of '
				+ str(resultclass.perf_n))

	cfunc = functools.partial(cost_function, sim, mat_fn,
			(args.start, args.stop, args.step),
			args.v, scale, offset, perf_i, par_n, resultclass)

	print(par_n)
	if args.method == 'pso':
		assert pso is not None, 'Library for pso is not installed'
		swarmsize=5
		lb = [v[0] for v in par_b]
		ub = [v[1] for v in par_b]
		res = pso(cfunc, lb, ub, maxiter=args.maxiter, swarmsize=5)
		cand = [scale[i]*v + offset[i] for i, v in enumerate(res[0])]
		print(cand)
		print(res[1])
	elif args.method == 'cma':
		assert cma is not None, 'Library for cma is not installed'
		sigma0 = 0.2 # "step size", should be around 1/4 of search domain
		popsize = 5
		res = cma.fmin(cfunc, par_0, sigma0,
				restarts=0,
				options={
						#'maxfevals': args.maxiter,
						'maxiter': args.maxiter,
						'popsize': popsize,
				})
		cand = [scale[i]*v + offset[i] for i, v in enumerate(res[0])]
		print(cand)
		print(res[1])
	else:
		res = sciopt.minimize(cfunc, par_0, method=args.method, bounds=par_b,
				options={
					#'maxfev': args.maxiter,
					'maxiter': args.maxiter,
					'disp': True,
				})
		print(res)
		cand = [scale[i]*v + offset[i] for i, v in enumerate(res.x)]
		print(cand)
		print(res.fun)
