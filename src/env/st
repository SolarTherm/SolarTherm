#!/usr/bin/python
from __future__ import print_function
from __future__ import unicode_literals 

# SolarTherm invocation script
# This is an alternative to the current 'st_local_env' thing, which seems to be
# unnecessarily complicated for new users. The idea is for this single script
# to be installed on the user's PATH, and then for all SolarTherm scripts to
# run 'through' this wrapper script. For example 'st_simulate' becomes 'st simulate'
# with no underscore.

import os, subprocess, sys, platform

if platform.system()=="Windows":
	PATHSEP = ";"
else:
	PATHSEP = ":"
		
def CYG(path):
	"""Convert a MSYS path to a native Windows path, where necessary."""
	if not platform.system() == "Windows":
		return path # no action required on Linux
	if not os.environ.get("MSYSTEM"):
		print("This script must be run from inside an MSYS MINGW64 prompt")
		sys.exit(2)
	return subprocess.check_output(['cygpath','-w',path],encoding='utf-8').strip()

def PJ(*args):
	"""Join paths in a PATH-like environment variable using this platform's separator char."""
	return PATHSEP.join(args)

def PS(val):
	"""Split a PATH-like variable into a list. FIXME possible escaping?"""
	return val.split(PATHSEP)

def prepend(path,envvar):
	pp = os.environ.get(envvar)
	if pp is not None:
		path = PJ(path,pp)
	os.environ[envvar] = path

def append(path,envvar):
	pp = os.environ.get(envvar)
	if pp is not None:
		path = PJ(pp,path)
	os.environ[envvar] = path

instp = CYG('/home/arfontalvo/.local')
os.environ['INSTALL_PREFIX'] = instp
assert os.environ.get('HOME')

os.environ['OPENMODELICALIBRARY']=PJ(
	CYG(os.path.join(os.path.expandvars("$HOME"),".openmodelica","libraries"))
	,CYG(os.path.join(os.path.expandvars("$INSTALL_PREFIX"),"lib","omlibrary"))
	,CYG("/usr/lib/omlibrary")
	,CYG("/usr/local/lib/omlibrary")
)

# TODO: later, we may put st_simulate etc someone OFF the path, and in that case
# we will have to chage the invocation.
#prepend(os.path.expandvars("$INSTALL_PREFIX/bin"),"PATH")

version=sys.version_info[:2]
pyp = os.path.join(instp,"lib","python{0}.{1}/site-packages".format(*version))
append(pyp,'PYTHONPATH')

libp = os.path.join(instp,"lib")
prepend(libp,'LD_LIBRARY_PATH')
prepend(libp,'LIBRARY_PATH')

if os.environ.get('VERBOSE'):
	for v in ['OPENMODELICALIBRARY','PATH','LD_LIBRARY_PATH','LIBRARY_PATH']:
		print(v,"=",os.environ[v])

cmds = ['simulate','optimise','inspect','plotmat','cost','conv_sam_ourly','wea_to_mo']

if len(sys.argv) == 1 or sys.argv[1] == "--help":
	print("'st' is a helper script for running SolarTherm tools. It should be")
	print("followed by a sub-command, eg \"st simulate\". The valid sub-commands")
	print("are:")
	print("    %s"%("\n    ".join(cmds)))
	print("For help with sub-commands, type eg \"st simulate --help\"")
	sys.exit(0)

if sys.argv[1] not in cmds:
	print("Invalid sub-command '%s'. Type \"st --help`\" for a list of valid options."%(sys.argv[1]))
	sys.exit(1)

# TODO, we may be able to gradually migrate to st_simulate etc not being installed
# in the path. 

scr = 'st_%s'%(sys.argv[1])
if platform.system() == "Windows":
	call = ["/usr/bin/python",os.path.join(instp,"bin",scr)]
else:
	call = [scr]

if os.environ.get('VERBOSE'):
	print("CALL =",call)
	print("ARGS =",sys.argv[2:])

res = subprocess.call(call + sys.argv[2:])
sys.exit(res)

	
